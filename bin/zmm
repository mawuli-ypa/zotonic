#!/usr/bin/env python
#
# Copyright 2013 Mawuli Adzaku <mawuli@mawuli.me>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#	 http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Zotonic CLI for managing modules. Modules are by default pulled from modules.zotonic.com
#

# version
__version__ = "0.1.0"

import os
import sys
import requests
import re
from urlparse import urlparse
from optparse import OptionParser
import tarfile
from StringIO import StringIO
import subprocess
from datetime import datetime      

try:
    import json
except ImportError:
    import simplejson as json

class ZMM():
    """
    Class for holding all Zotonic module related functions
    """    
    ZMR_SERVER = 'http://gsoc:8200/api/zmr/repositories'
    ZMR_MODBASE_API = 'http://gsoc:8200/api/base/modules' 
    INSTALL_PATH = os.path.join(os.environ['ZOTONIC'], 'priv/modules')
    __SITES_DIR = os.path.join(os.environ['ZOTONIC'],'priv','sites')
    __BASE_MODULE_PATH = os.path.join(os.environ['ZOTONIC'], 'modules')
    __SUPPORTED_SCMS =  ["hg", "git"]

    def __init__(self):
        # help message
       self.USAGE = """
        zmm COMMAND [OPTIONS] 
        zmm install|uninstall|activate|deactiave module1, [module2 ...] [OPTIONS] 
        zmm freeze|bundle|search|list [OPTIONS]
    """


    def __scan_modules(self):
        """ scan for modules in shared modules dircectory and modules directoies in the
        various sites """
        import glob
        
        # dictionary to hold all Zotonic modules
        modules = {}
        os.environ['ZOTONIC'] = '/home/mawuli/dev/zotonic'
        shared_modules =  glob.glob(os.path.join(ZMM.INSTALL_PATH,'mod_*'))

        # get remote repository links
        modules['shared'] = {}
        for (modulename,modulepath) in [(os.path.basename(module),module) for module in shared_modules]:
            # get the repo's remote url
            modules['shared'][modulename] = {'path': modulepath ,'url': self.__get_repo_url(modulepath)}

        zotonic_sites = self.__scan_sites()
        for site in zotonic_sites:
            if site not in modules:
                modules[site] = {}
            site_modules = glob.glob(os.path.join(ZMM.__SITES_DIR, site,"modules/mod_*"))            

            # get remote repository links        
            for (modulename,modulepath) in [(os.path.basename(module),module) for module in site_modules]:
                # get the repo's remote url
                modules[site][modulename] = {'path': modulepath ,'url': self.__get_repo_url(modulepath)} 

        return modules


        

    def __get_repo_url(self, repo_path):
        if os.path.exists(os.path.join(repo_path,'.git')):
            # repository is a Git repo
            cmd = 'cd %s  && git remote -v | grep fetch | cut -f 2 | cut -d " " -f 1 ' % repo_path
            return subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE).stdout.read().rstrip()
        else:
            # todo: how to get Mercurial/hg repo remote url
            return None


    def install(self, modulename, direct_link = False):
        """ Install modules. """
        if not re.match("^mod_[a-z_]+$", modulename):
            # fixme - valid module name
            print "** Invalid module name:", modulename
            return False

        if direct_link:
            self.__direct_download(modulename, direct_link)
        else:    
            # if modulename is a path to a file generated by the freeze command
            if os.path.exists(modulename):
                return self.__install_from_file(modulename)

            # todo: improve mod_zmr search by matching against module title.
            info  = [mod for mod in self.search()  if mod['title'] == modulename]
            if not info:
                print "** Module not found:", modulename
                return False
            info = info[0]
            
            # clone repository now
            if self.__clone_repo(modulename, info['repository'], info['scm']):
                print "**", modulename, "OK"
                return True


    def __install_from_file(self, filepath):
        # read file, loop through json dict, and install modules
        with open(filepath) as input_file: 
            modules = json.load(input_file)
            if modules:
                for key in modules:
                    site_modules_dir = os.path.join(ZMM.__SITES_DIR, key)
                    install_path = ZMM.INSTALL_PATH if key == 'shared' else site_modules_dir 
                    for module, info in key.items():
                        # todo: check for null urls
                        # todo: add repo SCM to dictionary generated by freeze
                        self._clone_repo(module, info['url'], 'git', install_path)
            else:
                print "***Empty file: %s" % filepath


    def __direct_download(self, modulename, download_link):
        # use case 1: zmm install mod_abc --url https://github.com/zotonic/mod_abc
        # use case 2: zmm install mod_abc -r zmm_05_55_08_07_2013.txt
        if download_link.endswith('.tar.gz'):
            # todo: support more different compression formats
            print "*** Downloaidng %s from %s " % (modulename, download_link)
            r = requests.get(download_link)
            if r.ok:
                extract_path = os.path.join(ZMM.INSTALL_PATH, module_name)
                try:
                    tar = tarfile.open(StringIO(r.content))
                    tar.extractall(extract_path)
                    tar.close()
                except:
                    print "*** Error extracting %s to %s" % (modulename, extract_path)
                    exit(2)
        else: # non-archive link
            # todo: how to detect SCM given only the remote repository link
            for scm in ZMM.__SUPPORTED_SCMS:
                # clone repository
                if self.__clone_repo(modulename,download_link, scm):
                    print "***", modulename, "OK"
                    return True


    def __clone_repo(self, modulename, repository, scm, path=None):
        clonepath = path if path else os.path.join(ZMM.INSTALL_PATH, modulename)
        if os.path.exists(clonepath):
            print "** Target path already exists:", clonepath
            return False

        if os.path.exists(os.path.join(ZMM.__BASE_MODULE_PATH, modulename)):
            print "** Module already exists in zotonic core:", clonepath
            return False

        if repository:  
            pieces = urlparse(repository)
            if  not all([pieces.scheme, pieces.netloc]) or pieces.scheme not in ['http', 'https', 'git', 'ssh']: # check on URL scheme and validate url
                print "** Module has no valid repository URL"
                return False

        if scm not in ZMM.__SUPPORTED_SCMS:
            print "** Module has unsupported/unknown SCM: %s", scm
            return False

        print "** Installing", modulename,"..."

        cmd = "%s clone %s %s" % (scm, repository, clonepath)
        code, signal = divmod(os.system(cmd), 1<<8)
        if code != 0:
            return False
        else:
            return True

    def activate(self, modules):
        """ Activates a module, and its dependencies """
        r = requests.get(ZMM.ZMR_MODBASE_API, params={'command': 'activate','modules':str(modules)})
        print "*** %s OK" % r.status_code if r.status_code == 200 else "*** ERROR  %s" % r.status_code

    def deactivate(self,modules):
        """ Deactive a module and related module dependencies modules that are not needed by other module"""
        r = requests.get(ZMM.ZMR_MODBASE_API, params={'command': 'deactivate','modules':str(modules)})
        print "*** %s OK" % r.status_code if r.status_code == 200 else "*** ERROR %s"
        return True if r.status_code == 200 else False

    def restart(self,modules):
        # restart modules
        r = requests.get(ZMM.ZMR_MODBASE_API, params={'command': 'restart','modules':str(modules)})
        print "*** %s OK" % r.status_code if r.status_code == 200 else "*** ERROR  %s" % r.status_code

    def uninstall(self, modules, force=False):
        """ Uninstall modules - deactivates and deletes a mdoule """
        to_delete = []
        all_modules = zmm.__scan_modules()
       # print all_modules
        for key in all_modules:
            for module, info in all_modules[key].items():
                if module in modules:
                    to_delete.append(info['path'])
        if to_delete:
            if zmm.deactivate(to_delete):
                # delete module directories
                import shutil
                map(lambda path: shutil.rmtree(path), to_delete)  
            else:
                print "*** %s Failed to deactivate modules"

    def freeze(self, path=None):
        """ Write the list of installed modules into a file for use later """
        modules = self.__scan_modules()

        # set filename to current time
        filename = 'zmm_%s.txt' % datetime.now().strftime("%y_%m_%d_%H_%M")
        output_path = os.path.join(path, filename) if os.path.exists(path) else os.path.join(os.environ['ZOTONIC'],'priv',filename)
        # write modules dictionary data to a file
        try:
            with open(output_path,'w') as outfile:
                json.dump(modules, outfile)

            print "successfully wrote module list to %s" % output_path
        except:
            print "***ERROR: failed to write to %s"  % output_path

    def __scan_sites(self):
        # scan for zotonic sites
        return filter(lambda x: os.path.isdir(os.path.join(ZMM.__SITES_DIR, x)),
                               os.listdir(ZMM.__SITES_DIR))

    def bundle(self):
        """ Bundle all modules into a compressed file format """
        archive_paths = map(lambda x: os.path.join(ZMM.__SITES_DIR, x,'modules'), 
                                    self.__scan_sites()) + [ZMM.INSTALL_PATH]
        filename = 'zmm_%s.tar.gz' % datetime.now().strftime("%y_%m_%d_%H_%M")
        output_filename = os.path.join(os.environ['ZOTONIC'], 'priv',filename)
        print "*** Archiving all modules"
        with tarfile.open(output_filename, "w:gz") as tar:
                for path in archive_paths:
                    if os.path.exists(path):
                        archive_name = path.split('/')[-2]
                        tar.add(path, arcname=archive_name)

        print "***Modules archived saved to %s" % output_filename
        

    def search(self, title=None, category=None):
        """ Search for modules, and filter by category or Zotonic compatibility version"""
        def get_query_args(title, category):
            if category and not title:
                return {'category':category}
            elif title and not category:        
                return {'title': title}
            elif category and title:
                return {'category': category, 'title': title}

        print "Getting module index"
        try:
            modules = json.loads(requests.get(ZMM.ZMR_SERVER,
                                              params=get_query_args(title, category)).content)
            return modules
        except:
            print "Parse error while getting module list from " + ZMM.ZMR_SERVER
            exit(2)


if __name__ == "__main__":
    zmm = ZMM()
    parser = OptionParser(usage=zmm.USAGE)
    parser.add_option('-f','--force', help="Ignore errors, and finish task", dest='verbose', 
                      default=True, action='store_false')
    parser.add_option('-p','--path', help='modules install path. defaults to priv/modules', 
                      dest='path', default=ZMM.INSTALL_PATH )
    parser.add_option("-a", "--api", help="Remote repository API", dest='api',
                      default=ZMM.ZMR_SERVER)   
    parser.add_option("-s", "--site", help="Site affected by the command", 
                      default='global')   
    parser.add_option('-u','--url', help="Link to directly clone/download module", action='store')
    parser.add_option('-r','--read', help="File containing list of modules to install - usually generated by freeze", action='store')

    (opts, args) = parser.parse_args()
    if not args:
        parser.print_help()
        exit(-1)
    command = args[0] 
    command_args = args[1:]
    if command in ['list','search']:
        title = command_args[0] if command_args else None
        category = command_args[1] if len(command_args) > 1 else None        
        modules = zmm.search(title, category)
        table = [[module['title'], module['category'], module['repository']] for module in modules]
 
        print "%-25s %-20s  %s" % ("Module", "Category", "Repository")
        for row in table:
            print "%-25s %-20s  %s" % (row[0], row[1], row[2])

    elif command == 'install':
        # read list of modules from file generated by the freeze command 
        modules = opts.read if opts.read else None

        # at least one module name is given
        modules = command_args if command_args else None
        
        if not modules:
            parser.print_help()
            exit(1)

        module_repository_url = opts.url if opts.url else None  
        # adjust the install path if a custom install path is given
        if opts.path and os.path.exists(opts.path):
            ZMM.INSTALL_PATH = opts.path
        ok = False 
        for module in modules:
            ok = zmm.install(module,module_repository_url)    
        # to do: build module and update the server
        if ok: 
            pass

    elif command == 'uninstall':
        # uninstall's a module - deactivates and deletes module
        # todo: ensure boolean value is stored in opts.force
        # todo: add support to force delete modules
        zmm.uninstall(command_args)

    elif command == 'freeze':
        # write currently installed modules to a file
        path = opts.path if opts.path else None
        zmm.freeze(path)

    elif command == 'bundle':
        # compress installed modules into an archive 
        zmm.bundle()

    elif command == 'activate':
        # acitaves a modules, and its dependencies
        zmm.activate(command_args)

    elif command == 'deactivate':
        # deactivate a module and dependenyc modules that are not needed by other module
        zmm.deactivate(command_args)

    elif command == 'restart':
        # restart modules
        zmm.restart(command_args)

    else:
        parser.print_help()
