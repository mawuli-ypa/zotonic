#!/usr/bin/env python
#
# Copyright 2013 Mawuli Adzaku <mawuli@mawuli.me>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#	 http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Zotonic CLI for managing modules. Modules are by default pulled from modules.zotonic.com
#

# version
__version__ = "0.1.0"
__last_modified__ = "July 4th, 2013"

import os
import sys
import httplib
import re
from urlparse import urlparse
from optparse import OptionParser

try:
    import json
except ImportError:
    import simplejson as json

INSTALL_PATH = os.path.join(os.environ['ZOTONIC'], 'priv/modules')
BASE_MODULE_PATH = os.path.join(os.environ['ZOTONIC'], 'modules')

# print "Hello, World!"

class ZMM():
    """
    Class for holding all Zotonic module related functions
    """    
    def __init__(self):
        # help message
       self. __help_message__ = """zmm %s for Zotonic built on %s.
       Usage: zmm [OPTIONS] COMMAND
        zmm [options] install|remove module1, [module2 ...]
        zmm [options] activate module1 [module2 ...]
    """ % (__version__, __last_modified__)

    def install(self, modules):
        """ Install modules """
        pass

    def uninstall(self, modules):
        """ Uninstall modules """
        pass
   
    def activate(self):
        """ Install modules"""
        pass

    def deactivate(self,modules):
        """" Deactive modules"""
        pass

    def freeze(self,site):
        """ Write the list of installed modules into a file for use later """
        pass

    def bundle(self,site):
        """" Bundle all modules into a zip file """
        pass

    def info(self,modules,modules):
        """" Dsplay information about a module """
        pass

    def search(self, title, category=None, compatibility_version=None):
        """ Serach for modules, and filter by category or Zotonic compatibility version"""
        pass

    def update(self,modules):
        """ Update all installed moules """
        pass

    def list(self):
        """" List all modules hosted at modules.zotonic.com"""
        pass

    def tests(self):
        """ Conduct unit tests on ZMM """
        pass

if __name__ == "__main__":
    zmm = ZMM()
    parser = OptionParser(usage=zmm.__help_message__)
    parser.add_option('-q','--quiet', help="Disable verbose output mode", dest='verbose', 
                      default=True, action='store_false')
    parser.add_option('-f','--force', help="Ignore errors, and finish task", dest='verbose', 
                      default=True, action='store_false')
    parser.add_option('-p','--path', help='modules install path. defaults to priv/modules', 
                      dest='path', default = INSTALL_PATH)
    parser.add_option("-a", "--api", help="Remote repository API", 
                      default='modules.zotonic.com')   
    parser.add_option("-s", "--site", help="Site affected by the command", 
                      default='global')   
#    parser.add_option("-t", "--timeout", help="Timeout(in seconds) for executing task", default=60)   
    parser.add_option('-u','--url', help="Link to directly clone/download module", action='store')
    parser.add_option('-t','--type', help="Format in which module is saved. Options include git, hg, zip", action='store', default='git')

    (opts, args) = parser.parse_args()
    if not args:
        parser.print_help()
        exit(-1)
