#!/usr/bin/env python
#
# Copyright 2011 Arjan Scherpenisse <arjan@scherpenisse.net>
# Copyright 2013 Mawuli Adzaku <mawuli@mawuli.me>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Zotonic CLI for managing modules. Modules are by default pulled from modules.zotonic.com
#
# Usage:
# $ bin/zmm <subcommand> [OPTIONS]
# $ bin/zmm --help
#


# version
__version__ = "0.1.0"
VERSION = 'zmm (Zotonic Modules Manager) version ' + __version__

# usage
USAGE = """ zmm <subcommand> [options]

Commands:
  install            Install a module
  uninstall          Uninstall a module
  activate           Activate a module
  deactiave          Deactiave a module
  list               List all modules avaiable on the Zotonic Modules Repository
  search <query>     Search for a module
"""


import os
import sys
import urllib
import re
import subprocess
from urlparse import urlparse
import optparse


try:
    import json
except ImportError:
    import simplejson as json

class ZMM():
    """Zotonic Module Manager

    This class holds all functions needed to install, uninstall, activate, deactivate,
    restart, bundle and freeze Zotonic modules. It also exports a function for searching
    for modules on the remote repositories. The default modules repository is http://modules.zotonic.com

    """
    SITES_DIR = os.path.join(os.environ['ZOTONIC'],'priv','sites')
    BASE_MODULE_PATH = os.path.join(os.environ['ZOTONIC'], 'modules')
    SCMS =  ['hg', 'git']
    zmr_server = 'http://%s/api/zmr/repositories'
    install_path = os.path.join(os.environ['ZOTONIC'], 'priv','modules')

    def __init__(self):
       # debug switch
       self.debug = False
       self.nodename = os.environ['NODENAME']

    def _scan_modules(self):
        """Scan for modules

        Looks for modules in the shared modules dircectory and the
        various site specific module directories in the

        """
        import glob

        # dictionary to hold all Zotonic modules
        modules = {}
        shared_modules =  glob.glob(os.path.join(self.install_path,'mod_*'))

        # get remote repository links
        modules['priv'] = {}
        for (modulename,modulepath) in [(os.path.basename(module),module) for module in shared_modules]:
            # get the repo's remote url
            modules['priv'][modulename] = {'path': modulepath ,'url': self._get_repo_url(modulepath)}

        zotonic_sites = self._scan_sites()
        for site in zotonic_sites:
            if site not in modules:
                modules[site] = {}
            site_modules = glob.glob(os.path.join(self.SITES_DIR, site,"modules/mod_*"))

            # get remote repository links
            for (modulename,modulepath) in [(os.path.basename(module),module) for module in site_modules]:
                scm = 'git' if os.path.exists(os.path.join(modulepath,'.git')) else 'hg'
                # get the repo's remote url
                modules[site][modulename] = {'path': modulepath,
                                             'url': self._get_repo_url(modulepath),
                                             'scm':scm}

        return modules


    def module_exists(self, module, site=None):
        """Check if module exists"""
        if site:
            modules = self._scan_modules()
            return site in modules and module in modules[site]
        else:
            return os.path.exists(os.path.join(self.install_path, module))
        
    def _get_repo_url(self, repo_path):
        """Returns the url to a module's repository master branch"""
        if os.path.exists(os.path.join(repo_path,'.git')):
            # repository is a Git repo
            cmd = 'cd %s  && git remote -v | grep fetch | cut -f 2 | cut -d " " -f 1 ' % repo_path
            return subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE).stdout.read().rstrip()
        else:
            # todo: how to get Mercurial/hg repo remote url
            return None


    def install(self, modulename, site=None, direct_link=False, path=False,):
        """Install a module

        Usage:
        zmm install mod_abc --url https://github.com/zotonic/mod_abc
        """
        if not re.match("^mod_[a-z_]+$", modulename):
            # fixme - valid module name
            print "** Invalid module name:", modulename
            return False

        # update the install path if a custom install path is given
        if site:
            site_modules_dir = os.path.join(self.SITES_DIR, site, "modules")
            if os.path.exists(site_modules_dir):
                self.install_path = site_modules_dir
        elif path and os.path.exists(path):
            self.install_path = path
                
        if direct_link:
            return self._direct_download(modulename, direct_link)
        else:
            info  = [mod for mod in self.search(modulename)  if mod['title'] == modulename]
            if not info:
                print "** Module not found:", modulename
                return False
            info = info[0]

            # clone repository now
            if self._clone_repo(modulename, info['repository'], info['scm']):
                print "**", modulename, "OK"
                return True


    def _direct_download(self, modulename, download_link):
        """Downloads a module packaged as a tarfile"""
        if download_link.endswith('.tar.gz'):
            print "OK: Downloading %s from %s " % (modulename, download_link)
            f = urllib.urlopen(download_link)
            if f.code == 200:
                extract_path = os.path.join(self.install_path, module_name)
                try:
                    tar = tarfile.open(StringIO(f.read()))
                    tar.extractall(extract_path)
                    tar.close()
                except:
                    print "ERROR: failed to extract %s to %s" % (modulename, extract_path)
                    exit(os.EX_NOPERM)
        else: # non-archive link
            # todo: detect SCM given only the remote repository link
            for scm in self.SCMS:
                # clone repository
                if self._clone_repo(modulename,download_link, scm):
                    print "OK: ", modulename
                    return True


    def _clone_repo(self, modulename, repository, scm, path=None):
        """Clone a remote SCM repository"""
        clonepath = path if path else os.path.join(self.install_path, modulename)
        if os.path.exists(clonepath):
            print "** %s already installed at %s" % (modulename, clonepath)
            return False

        if os.path.exists(os.path.join(self.BASE_MODULE_PATH, modulename)):
            print "** Module already exists in zotonic core:", clonepath
            return False

        if repository:
            pieces = urlparse(repository)
            # check URL scheme and validate url
            if  not all([pieces.scheme, pieces.netloc]) or pieces.scheme not in ['http', 'https', 'git', 'ssh']:
                print "** Module has no valid repository URL"
                return False

        if scm not in self.SCMS:
            print "** Module has unsupported/unknown SCM: %s", scm
            return False

        print "** Installing", modulename,"..."
        if self.cmd_exists(scm):
            cmd = "%s clone %s %s" % (scm, repository, clonepath)
            code, signal = divmod(os.system(cmd), 1<<8)
            if code != 0:
                return False
            else:
                return True
        else:
            print "ERROR: please install %s and try again" % scm
            exit(1)
            
    def cmd_exists(self, cmd):
        return subprocess.call("type " + cmd, shell=True, 
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0
            
    def run_zotonic_cmd(self, command, module, site):
        """Runs zotonic module related methods on the zotonic node

        Commands accepted: restart, activate, and deactivate.
        @todo: activate, deactivate, restart module dependencies 
        """
        if self.module_exists(module):
            if self.zotonic_call(command, module, site):
                print "OK: %s %s" % (command, module)
                return True
            else:
                print "ERROR: Could not %s %s" % (command, module)
                return False                
        else:
            print "ERROR: module '%s' does not exist in %s" % (module, site)
            return False
        

    def update_repo(self,path):
        os.chdir(path)
        print "Pulling latest changes from %s" % self._get_repo_url(path)
        cmd = "git pull origin --verbose"
        code, signal = divmod(os.system(cmd), 1<<8)
        if code != 0:
            return False
        else:
            return True

    def update(self, module, site=None):
        """ Update a module

        If site is given, the module is then assumed to be within the module's 
        directory of the given site
        """
        if site:
            if not self.module_exists(module, site):
                print "ERROR: %s not found in %s " % (module, site)
                exit(os.EX_DATAERR)
            if self.update_repo(os.path.join(self.SITES_DIR, site, 'modules', module)):
                print "OK: %s in %s updated" % (module, site)
            else:
                print "ERROR: Could not update %s" % module
                exit(os.EX_DATAERR)
        else:
            if not self.module_exists(module):
                print "ERROR: %s not found" % module
                exit(os.EX_DATAERR)
            if self.update_repo(os.path.join(self.install_path, module)):
                print "OK: %s updated" % module
            else:
                print "ERROR: Could not update %s" % module
                exit(os.EX_DATAERR)
            
    def uninstall(self, module, site=None):
        """ Uninstall modules

        Deactivates and deletes a mdoule
        """
        import shutil
        if site and site in self._scan_sites():
            module_path = os.path.join(self.SITES_DIR, site, 'modules', module)
            # deactivate module and delete module directory
            self.run_zotonic_cmd('deactivate', module, site)    
        else:
            module_path = os.path.join(self.install_path, module)

        if not os.path.exists(module_path):
            print "ERROR: %s not found" % module
            exit(os.EX_DATAERR)
            
        # handle error encounted when deleting directory
        def handle_error(func, path, exec_info):
            print "ERROR: Failed to uninstall %s" % module
            exit(2)

        shutil.rmtree(module_path, False, handle_error)
        print "OK: %s uninstalled" % module
        return True
        
    def _scan_sites(self):
        """Scan for Zotonic sites in the install path"""
        return filter(lambda x: os.path.isdir(os.path.join(self.SITES_DIR, x)),
                               os.listdir(self.SITES_DIR))

    def search(self, query):
        """ Search for modules

        Searches for modules on the remote repository API which defaults to modules.zotonic.com.
        The response can be filtered or by module name/title match.
        """
        print "Getting module index"
        try:
            url = self.zmr_server + '?q=%s' % query if query else self.zmr_server
            fp = urllib.urlopen(url)
            return json.loads(fp.read())
        except IOError:
            print "ERROR: Network down or server unknown: " + self.zmr_server
            exit(os.EX_NOINPUT)
        except:
			print "ERROR: can not parse data returned from " + self.zmr_server 

    def update_zotonic(self):
        print "Updating Zotonic..."
        os.system("make compile-zotonic")
        os.system("%s update" % os.path.join(os.environ["ZOTONIC_BIN"], "zotonic"))
            
    def zotonic_call(self, function, args, site):
        """Make a call to the Zotonic node

        Passes an erlang expression to the $ERL_CALL environment variable.
        The expression is a call to z_module_manager. The z_module_mamanger method to call,
        argumnents, and the affected site are passed to this function.
        """
        #todo: activate module in all sites if no site is given
        Expression = """
        Context = z:c(%s),
        Response = z_module_manager:%s(%s, Context),
        Response.
        """ % (site, function, args)

        # replace the nodename in the $ZOTONIC_CALL ENVIRONMENT variable with custom nodename
        # So, if the value of $ZOTONIC_CALL is
        # '/home/foobar/erlang/lib/erl_interface-3.7.7/bin/erl_call -sname zotonic001@foobar',
        # find the firt occurrence of space and grab that part as the path to erl_call,
        # and piece in the $NAME_ARG then finally add the custom nodename supplied via the -n switch
        z_call = os.environ['ZOTONIC_CALL']
        erl_call = z_call[:z_call.find(' ')] + ' '
        z_call = erl_call + os.environ['NAME_ARG'] + " %s@$NODEHOST" % self.nodename
        run_cmd = 'echo "%s" | %s -e' if self.debug else 'echo "%s" | %s -e  > /dev/null 2>&1'
        code, signal =  divmod(os.system(run_cmd % (Expression, z_call)),1<<8)
        if code != 0:
            return False
        else:
            return True


def main():
    """Main script logic"""
    zmm = ZMM()
    parser = optparse.OptionParser(usage=USAGE, version=VERSION)
    parser.add_option('-p','--path', help='Set custom install path. Defaults to priv/modules',
                      dest='path', default=zmm.install_path)
    parser.add_option("-z", "--zmr", help="Zotonic modules repository", dest='zmr',default='modules.zotonic.com')
    parser.add_option("-s", "--site", help="Affected Zotonic site", dest='site')
    parser.add_option('-u','--url', help="Link to directly clone/download module", action='store')
    parser.add_option('-d','--debug', help="Enable debugging", action='store_true', dest='debug', default=zmm.debug)
    parser.add_option('-n','--node', help="Zotonic Erlang node", action='store', dest='node')

    (opts, args) = parser.parse_args()
    zmm.zmr_server = zmm.zmr_server % opts.zmr
    zmm.debug = opts.debug

    # subcommands
    subcommands = ['list','search','install','uninstall',
                    'activate','deactivate','restart','update']

    if not args:
        parser.print_help()
        exit(os.EX_NOINPUT)
		
    elif args[0] not in subcommands:
		print 'ERROR: unknown command "%s"' % args[0]
		exit(os.EX_NOINPUT)

    command, command_args = args[0], args[1:]
  
    # require sitename for certain commands
    if command in ['activate','deactivate','restart'] and not opts.site:
        print "ERROR: please provide a site name"
        exit(os.EX_DATAERR)

    # affected Zotonic node
    if opts.node:
        zmm.nodename = opts.node

    if command in ['list','search']:		
        query = command_args[0] if command_args and command == 'search' else None
        if command == 'search' and not query:
			print "ERROR: please provide a search query"
			exit(os.EX_NOINPUT)
        modules = zmm.search(query)

        if modules:
            table = [[module['title'], module['description']] for module in modules]
            print "%-25s %s" % ("Module", "Description")
            for row in table:
                print "%-25s  %s" % (row[0], row[1])

        else:
            print 'ERROR: "%s" did not match any module' % query

    elif command == 'install':
        ok = False
        for module in command_args:
            ok = zmm.install(module, opts.site, opts.url, opts.path)
        # if OK, update server
        if ok:
            zmm.update_zotonic()
    
    elif command in ['activate', 'deactivate', 'restart']:
        for module in command_args:
            zmm.run_zotonic_cmd(command, module, opts.site)           

    elif command == 'uninstall':
        site = opts.site if opts.site else None
        for module in command_args:
            zmm.uninstall(module, site)

        # update server to effect changes
        zmm.update_zotonic()

    elif command == 'update':
        for command in command_args:
            zmm.update(command, opts.site)

            
if __name__ == "__main__":
	main()
	
