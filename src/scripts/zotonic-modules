#!/usr/bin/env python
#
# Copyright 2013 Mawuli Adzaku <mawuli@mawuli.me>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#	 http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Zotonic CLI for managing modules. Modules are by default pulled from modules.zotonic.com
#

# version
__version__ = "0.1.0"
__last_modified__ = "July 4th, 2013"

import os
import sys
import requests
import re
from urlparse import urlparse
from optparse import OptionParser
import zipfile
from StringIO import StringIO

try:
    import json
except ImportError:
    import simplejson as json

class ZMM():
    """
    Class for holding all Zotonic module related functions
    """    
    ZMR_SERVER = 'http://gsoc:8200/api/zmr/repositories?'
    INSTALL_PATH = os.path.join(os.environ['ZOTONIC'], 'priv/modules')
    __BASE_MODULE_PATH = os.path.join(os.environ['ZOTONIC'], 'modules')
    __SUPPORTED_SCMS =  ["hg", "git"]

    def __init__(self):
        # help message
       self.USAGE = """zmm %s for Zotonic built on %s.
       Usage: zmm [OPTIONS] COMMAND
        zmm [options] install|remove module1, [module2 ...]
        zmm [options] activate module1 [module2 ...]
    """ % (__version__, __last_modified__)

    def install(self, modulename, direct_link = False):
        """ Install modules. """
        if not re.match("^mod_[a-z_]+$", modulename):
            # fixme - valid module name
            print "** Invalid module name:", modulename
            return False

        if direct_link:
            self.__direct_download(module_name, direct_link)
        else:    
            # todo: improve mod_zmr service search by matching against module title.
            info  = [mod for mod in self.search()  if mod['title'] == modulename]
            if not info:
                print "** Module not found:", modulename
                return False
            info = info[0]
            
            # clone repository now
            if self.__clone_repo(info['repository'], info['scm']):
                print "**", modulename, "OK"
                return True

    def __direct_download(modulename, direct_download_link):
        # use case: zmm install mod_abc --url https://github.com/zotonic/mod_abc
        # link is a zip file
        if direct_link.ends_with('.zip'):
            r = requests.get(direct_link)
            if r.ok:
                extract_path = os.path.join(ZMM.INHSTALL_PATH, module_name)
                try:
                    z = zipfile.ZipFile(StringIO(r.content))
                    z.extractall(extract_path)
                except:
                    print "*** Error extracting %s to %s" % (modulename, extract_path)
                    exit(2)
        else: # non-zip file link
            # todo: how to detect SCM given only the remote repository link
            for scm in ZMM.__SUPPORTED_SCMS:
                # clone repository
                if self.__clone_repo(repository, scm):
                    print "**", modulename, "OK"
                    return True


    def __clone_repo(modulename, repository, scm):
        clonepath = os.path.join(ZMM.INSTALL_PATH, modulename)
        if os.path.exists(clonepath):
            print "** Target path already exists:", clonepath
            return False

        if os.path.exists(os.path.join(ZMM.__BASE_MODULE_PATH, modulename)):
            print "** Module already exists in zotonic core:", clonepath
            return False

        if repository:  
            pieces = urlparse(repository)
            if  not all(pieces.scheme, pieces.netloc) or pieces.scheme not in ['http', 'https', 'git', 'ssh']: # check on URL scheme and validate url
                print "** Module has no valid repository URL"
                return False

        if scm not in ZMM.__SUPPORTED_SCMS:
            print "** Module has unsupported/unknown SCM: %s", scm
            return False

        print "** Installing", modulename,"..."

        cmd = "%s clone %s %s" % (scm, repository, clonepath)
        code, signal = divmod(os.system(cmd), 1<<8)
        if code != 0:
            return False
        else:
            print "** Module has no valid repository URL"
            return False

    def uninstall(self, modules):
        """ Uninstall modules """
        pass
   
    def activate(self):
        """ Install modules"""
        pass

    def deactivate(self,modules):
        """ Deactive modules"""
        pass

    def freeze(self,site):
        """ Write the list of installed modules into a file for use later """
        pass

    def bundle(self,site):
        """ Bundle all modules into a zip file """
        pass

    def search(self, title=None, category=None):
        """ Search for modules, and filter by category or Zotonic compatibility version"""
        def get_query_args(title, category):
            if category and not title:
                return {'category':'category'}
            elif title and not category:        
                return {'title': title}
            elif category and title:
                return {'category': category, 'title': title}

        print "Getting module index"
        try:
            modules = json.loads(requests.get(ZMM.ZMR_SERVER,
                                              params=get_query_args(title, category)).content)
            return modules
        except:
            print "Parse error while getting module list from " + ZMM.ZMR_SERVER
            exit(2)


    def restart(self,site, modules):
        """ Restart modules """
        pass

if __name__ == "__main__":
    zmm = ZMM()
    parser = OptionParser(usage=zmm.USAGE)
    parser.add_option('-q','--quiet', help="Disable verbose output mode", dest='verbose', 
                      default=True, action='store_false')
    parser.add_option('-f','--force', help="Ignore errors, and finish task", dest='verbose', 
                      default=True, action='store_false')
    parser.add_option('-p','--path', help='modules install path. defaults to priv/modules', 
                      dest='path', default=ZMM.INSTALL_PATH )
    parser.add_option("-a", "--api", help="Remote repository API", dest='api',
                      default=ZMM.ZMR_SERVER)   
    parser.add_option("-s", "--site", help="Site affected by the command", 
                      default='global')   
#    parser.add_option("-t", "--timeout", help="Timeout(in seconds) for executing task", default=60)   
    parser.add_option('-u','--url', help="Link to directly clone/download module", action='store')
    parser.add_option('-t','--type', help="Format in which module is saved. Options include git, hg, zip", action='store', default='git')

    (opts, args) = parser.parse_args()
    if not args:
        parser.print_help()
        exit(-1)
    command = args[0] 
    command_args = args[1:]
    if command in ['list','search']:
        title = command_args[0] if command_args else None
        category = command_args[1] if len(command_args) > 1 else None        
        modules = zmm.search(title, category)
        table = [[module['title'], module['category'], module['repository']] for module in modules]
 
        from tabulate import tabulate
        headers =  ["Module", "Category", "Repository"]
        print tabulate(table,headers,tablefmt="simple")

    elif command == 'activate' :
        pass
    elif command == 'deactivate' :
        pass
    elif command == 'install':
        #print "***OPTS: "
        #print opts
        modulename = command_args[0] if command_args[0] else None
        if not modulename:
            parser.print_help()
            exit(1)

        module_repository_url = opts.url if opts.url else None  
        # adjust the install path if a custom install path is given
        if opts.path and os.path.exists(opts.path):
            ZMM.INSTALL_PATH = opts.path
        zmm.install(modulename,module_repository_url)

    elif command == 'uninstall' :
        pass
    elif command == 'freeze' :
        pass
    elif command == 'bundle' :
        pass
    elif command == 'restart':
        pass
    else:
        parser.print_help()
