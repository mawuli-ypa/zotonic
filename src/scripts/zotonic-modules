#!/usr/bin/env python
#
# Copyright 2013 Mawuli Adzaku <mawuli@mawuli.me>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#	 http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Zotonic CLI for managing modules. Modules are by default pulled from modules.zotonic.com
#
# Usage:
# $ bin/zmm COMMAND [OPTIONS] 
# $ bin/zmm --help
# 


# version
__version__ = "0.1.0"

import os
import sys
import urllib
import re
from urlparse import urlparse
from optparse import OptionParser
import tarfile
from StringIO import StringIO
import subprocess
from datetime import datetime      


try:
    import json
except ImportError:
    import simplejson as json

class ZMM():
    """Zotonic Module Manager

    This class holds all functions needed to install, uninstall, activate, deactivate,
    restart, bundle and freeze Zotonic modules. It also exports a function for searching 
    for modules on the remote repositories. The default modules repository is http://modules.zotonic.com
    """    
    ZMR_SERVER = 'http://%s/api/zmr/repositories?'
    ZMR_MODBASE_API = 'http://%s/api/base/modules' 
    INSTALL_PATH = os.path.join(os.environ['ZOTONIC'], 'priv/modules')
    __SITES_DIR = os.path.join(os.environ['ZOTONIC'],'priv','sites')
    __BASE_MODULE_PATH = os.path.join(os.environ['ZOTONIC'], 'modules')
    __SUPPORTED_SCMS =  ["hg", "git"]

    def __init__(self):
        # help message
       self.USAGE = """zmm COMMAND [OPTIONS] 
           zmm install|uninstall|activate|deactiave module1, [module2 ...] [OPTIONS] 
           zmm freeze|bundle|search|list [OPTIONS]
       """


    def __scan_modules(self):
        """Scan for modules
       
        Looks for modules in the shared modules dircectory and the 
        various site specific module directories in the 

        """        
        import glob
        
        # dictionary to hold all Zotonic modules
        modules = {}
        shared_modules =  glob.glob(os.path.join(ZMM.INSTALL_PATH,'mod_*'))

        # get remote repository links
        modules['priv'] = {}
        for (modulename,modulepath) in [(os.path.basename(module),module) for module in shared_modules]:
            # get the repo's remote url
            modules['priv'][modulename] = {'path': modulepath ,'url': self.__get_repo_url(modulepath)}

        zotonic_sites = self.__scan_sites()
        for site in zotonic_sites:
            if site not in modules:
                modules[site] = {}
            site_modules = glob.glob(os.path.join(ZMM.__SITES_DIR, site,"modules/mod_*"))            

            # get remote repository links        
            for (modulename,modulepath) in [(os.path.basename(module),module) for module in site_modules]:
                scm = 'git' if os.path.exists(os.path.join(modulepath,'.git')) else 'hg'
                # get the repo's remote url
                modules[site][modulename] = {'path': modulepath,
                                             'url': self.__get_repo_url(modulepath),
                                             'scm':scm} 

        return modules


        

    def __get_repo_url(self, repo_path):
        """Returns the url to a module's repository master branch"""
        if os.path.exists(os.path.join(repo_path,'.git')):
            # repository is a Git repo
            cmd = 'cd %s  && git remote -v | grep fetch | cut -f 2 | cut -d " " -f 1 ' % repo_path
            return subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE).stdout.read().rstrip()
        else:
            # todo: how to get Mercurial/hg repo remote url
            return None


    def install(self, modulename, direct_link = False):
        """Install a module
        
        Usage: 
        zmm install mod_abc --url https://github.com/zotonic/mod_abc
        zmm install -r zmm_05_55_08_07_2013.txt
        """
        # modulename is a path to a file generated by the freeze command
        if os.path.exists(modulename):
            return self.__install_from_file(modulename)

        if not re.match("^mod_[a-z_]+$", modulename):
            # fixme - valid module name
            print "** Invalid module name:", modulename
            return False

        if direct_link:
            self.__direct_download(modulename, direct_link)
        else:    
            info  = [mod for mod in self.search()  if mod['title'] == modulename]
            if not info:
                print "** Module not found:", modulename
                return False
            info = info[0]
            
            # clone repository now
            if self.__clone_repo(modulename, info['repository'], info['scm']):
                print "**", modulename, "OK"
                return True


    def __install_from_file(self, filepath):
        """Install modules from a file

        Reads file created by the freeze command, and installs all the modules found in the json data found 
        in the file. 

        """
        with open(filepath) as input_file: 
            modules = json.load(input_file)
            if modules:
                for key in modules:
                    site_path = os.path.join(self.__SITES_DIR, key)
                    install_path = self.INSTALL_PATH
                    for module, info in modules[key].items():
                        if os.path.exists(site_path):
                            install_path = os.path.join(site_path, 'modules', module)
                            if info['url']: 
                                self.__clone_repo(module, info['url'], info['scm'], install_path)
            else:
                print "***Empty file: %s" % filepath


    def __direct_download(self, modulename, download_link):
        """Downloads a module packaged as a tarfile"""
        if download_link.endswith('.tar.gz'):
            print "*** Downloaidng %s from %s " % (modulename, download_link)
            f = urllib.urlopen(download_link)
            if f.code == 200:
                extract_path = os.path.join(ZMM.INSTALL_PATH, module_name)
                try:
                    tar = tarfile.open(StringIO(f.read()))
                    tar.extractall(extract_path)
                    tar.close()
                except:
                    print "*** Error extracting %s to %s" % (modulename, extract_path)
                    exit(os.EX_NOPERM)
        else: # non-archive link
            # todo: detect SCM given only the remote repository link
            for scm in ZMM.__SUPPORTED_SCMS:
                # clone repository
                if self.__clone_repo(modulename,download_link, scm):
                    print "***", modulename, "OK"
                    return True


    def __clone_repo(self, modulename, repository, scm, path=None):
        """Clone a remote SCM repository"""
        clonepath = path if path else os.path.join(ZMM.INSTALL_PATH, modulename)
        if os.path.exists(clonepath):
            print "** %s already installed at %s" % (modulename, clonepath)
            return False

        if os.path.exists(os.path.join(ZMM.__BASE_MODULE_PATH, modulename)):
            print "** Module already exists in zotonic core:", clonepath
            return False

        if repository:  
            pieces = urlparse(repository)
            # check URL scheme and validate url
            if  not all([pieces.scheme, pieces.netloc]) or pieces.scheme not in ['http', 'https', 'git', 'ssh']: 
                print "** Module has no valid repository URL"
                return False

        if scm not in ZMM.__SUPPORTED_SCMS:
            print "** Module has unsupported/unknown SCM: %s", scm
            return False

        print "** Installing", modulename,"..."

        cmd = "%s clone %s %s" % (scm, repository, clonepath)
        code, signal = divmod(os.system(cmd), 1<<8)
        if code != 0:
            return False
        else:
            return True

    def activate(self, modules):
        """ Activates a module, and its dependencies"""
        params =  urllib.urlencode({'command': 'activate','modules':str(modules)})
        f = urllib.urlopen(ZMM.ZMR_MODBASE_API,params)
        print "*** %s OK" % f.code if f.code == 200 else "*** ERROR  %s" % f.code

    def deactivate(self,modules):
        """Deactive a module
        
        Also deactivates module dependencies that are not needed by other modules, or not explicitly activated by Zotonic.
        
        """
        params = urllib.urlencode({'command': 'deactivate','modules':str(modules)})
        f = urllib.urlopen(ZMM.ZMR_MODBASE_API, params)
        print "*** %s OK" % f.code if f.code == 200 else "*** ERROR %s"
        return True if f.code == 200 else False

    def restart(self,modules):
        # restart modules
        params = urllib.urlencode({'command': 'restart','modules':str(modules)})
        f = urllib.urlopen(ZMM.ZMR_MODBASE_API, param)
        print "*** %s OK" % f.code if f.code == 200 else "*** ERROR  %s" % f.code

    def uninstall(self, modules):
        """ Uninstall modules
        
        Deactivates and deletes a mdoule 

        """        
        import shutil
        all_modules = zmm.__scan_modules()
        for site in all_modules:
            for module in modules:
                if module in all_modules[site]:
                    if zmm.deactivate(module):
                        shutil.rmtree(all_modules[site][module]['path'])
                        print "*** OK: %s uninstalled in %s" % (module, site)
                    else:
                        print "*** ERROR: %s could not be deactivated" % module
                else:
                    print "*** ERROR: %s not found in %s" % (module, site)

                    
    def freeze(self, path=None):
        """Write the list of installed modules to a file

        The data written to the file is a dictionary of modules available on the Zotonic server
        when the freeze command is issued. By default, the file is placed in the Zotonic default install path - 
        'ZOTONIC_ROOT_DIR/priv', and named in a format like zmm_05_55_08_07_2013.txt

        """
        filename = 'zmm_%s.txt' % datetime.now().strftime("%y_%m_%d_%H_%M")
        output_path = os.path.join(path, filename) if os.path.exists(path) else os.path.join(os.environ['ZOTONIC'],'priv',filename)
        # write modules dictionary data to a file
        try:
            with open(output_path,'w') as outfile:
                json.dump(self.__scan_modules(), outfile)

            print "successfully wrote module list to %s" % output_path
        except:
            print "***ERROR: failed to write to %s"  % output_path

    def __scan_sites(self):
        """Scan for Zotonic sites in the install path"""
        return filter(lambda x: os.path.isdir(os.path.join(ZMM.__SITES_DIR, x)),
                               os.listdir(ZMM.__SITES_DIR))

    def bundle(self):
        """Compress and archive all installed modules.
        
        The output of this command is tarfile that is placed in 'ZOTONIC_ROOT'/priv.

        """

        archive_paths = map(lambda x: os.path.join(ZMM.__SITES_DIR, x,'modules'), 
                                    self.__scan_sites()) + [ZMM.INSTALL_PATH]
        filename = 'zmm_%s.tar.gz' % datetime.now().strftime("%y_%m_%d_%H_%M")
        output_filename = os.path.join(os.environ['ZOTONIC'], 'priv',filename)
        print "*** Archiving all modules"
        with tarfile.open(output_filename, "w:gz") as tar:
                for path in archive_paths:
                    if os.path.exists(path):
                        archive_name = path.split('/')[-2]
                        tar.add(path, arcname=archive_name)

        print "***Modules archived saved to %s" % output_filename
        

    def search(self, title=None, category=None):
        """ Search for modules
        
        Searches for modules on the remote repository API which defaults to modules.zotonic.com. 
        The response can be filtered or by module name/title match.
        
        """
        def get_query_args(title, category):
            if category and not title:
                return {'category': category}
            elif title and not category:        
                return {'title': title}
            elif category and title:
                return {'category': category, 'title': title}
            else:
                return {'category':None, 'title': None}

        print "Getting module index"
        params = urllib.urlencode(get_query_args(title, category))
        try:
            fp = urllib.urlopen(self.ZMR_SERVER + params)
            return json.loads(fp.read())
        except:
            print "Parse error while getting module list from " + self.ZMR_SERVER
            exit(os.EX_DATAERR)
    
    def update(self, modules):
        """Update modules
        
        Pulls the latest module code changes from the remote repositories.

        """
        pass


if __name__ == "__main__":
    zmm = ZMM()
    parser = OptionParser(usage=zmm.USAGE)
    parser.add_option('-p','--path', help='Set custom install path. Defaults to priv/modules', 
                      dest='path', default=ZMM.INSTALL_PATH )
    parser.add_option("-s", "--site", help="Remote repository site", dest='site',
                      default='modules.zotonic.com')   
    parser.add_option('-u','--url', help="Link to directly clone/download module", action='store')
    parser.add_option('-c','--category', help="Module category", action='store', default='zmr_repository')
    parser.add_option('-f','--file', help="File containing list of modules to install", action='store', dest='file')

    (opts, args) = parser.parse_args()
    zmm.ZMR_SERVER= zmm.ZMR_SERVER % opts.site

    import inspect
    zmm_commands = map(lambda m: m[0], filter(lambda tuple: not tuple[0].startswith('_'), 
                          inspect.getmembers(ZMM, predicate=inspect.ismethod)))

    if not args or args[0] not in zmm_commands:
        parser.print_help()
        exit(os.EX_NOINPUT)
    command = args[0] 
    command_args = args[1:]
    if command in ['list','search']:
        title = command_args[0] if command_args else None
        modules = zmm.search(title, opts.category)
        table = [[module['title'], module['category'], module['repository']] for module in modules]
 
        print "%-25s %-20s  %s" % ("Module", "Category", "Repository")
        for row in table:
            print "%-25s %-20s  %s" % (row[0], row[1], row[2])

    elif command == 'install':
        # update the install path if a custom install path is given
        if opts.path and os.path.exists(opts.path):
            ZMM.INSTALL_PATH = opts.path

        ok = False
        if opts.file: # read module list from file
            ok = zmm.install(opts.file)
        elif opts.url: #directly install from url
            ok = zmm.install(command_args,opts.url)
        elif command_args:
            for module in command_args:
                ok = zmm.install(module)
        else:
            parser.print_help()
            exit(1)

        # install ok
        if ok: 
            os.system("make -j4")
            os.system("%s update" % os.path.join(os.environ["ZOTONIC_BIN"], "zotonic"))
        

    elif command == 'uninstall':
        zmm.uninstall(command_args)

    elif command == 'freeze':
        path = opts.path if opts.path else None
        zmm.freeze(path)

    elif command == 'bundle':
        zmm.bundle()

    elif command == 'activate':
        zmm.activate(command_args)

    elif command == 'deactivate':
        zmm.deactivate(command_args)

    elif command == 'restart':
        zmm.restart(command_args)

    elif command == 'update':
        zmm.update(command_args)

    else:
        parser.print_help()
